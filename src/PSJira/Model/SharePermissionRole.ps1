#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The project role that the filter is shared with.   For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in.

.PARAMETER Self
The URL the project role details.
.PARAMETER Name
The name of the project role.
.PARAMETER Id
The ID of the project role.
.PARAMETER Description
The description of the project role.
.PARAMETER Actors
The list of users who act in this role.
.PARAMETER Scope
No description available.
.PARAMETER TranslatedName
The translated name of the project role.
.PARAMETER CurrentUserRole
Whether the calling user is part of this role.
.PARAMETER Default
Whether this role is the default role for the project
.PARAMETER Admin
Whether this role is the admin role for the project.
.PARAMETER RoleConfigurable
Whether the roles are configurable for this project.
.OUTPUTS

SharePermissionRole<PSCustomObject>
#>

function Initialize-SharePermissionRole {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Actors},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Scope},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TranslatedName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CurrentUserRole},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Default},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Admin},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RoleConfigurable}
    )

    Process {
        'Creating PSCustomObject: PSJira => SharePermissionRole' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "self" = ${Self}
            "name" = ${Name}
            "id" = ${Id}
            "description" = ${Description}
            "actors" = ${Actors}
            "scope" = ${Scope}
            "translatedName" = ${TranslatedName}
            "currentUserRole" = ${CurrentUserRole}
            "default" = ${Default}
            "admin" = ${Admin}
            "roleConfigurable" = ${RoleConfigurable}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SharePermissionRole<PSCustomObject>

.DESCRIPTION

Convert from JSON to SharePermissionRole<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SharePermissionRole<PSCustomObject>
#>
function ConvertFrom-JsonToSharePermissionRole {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => SharePermissionRole' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SharePermissionRole
        $AllProperties = ("self", "name", "id", "description", "actors", "scope", "translatedName", "currentUserRole", "default", "admin", "roleConfigurable")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actors"))) { #optional property not found
            $Actors = $null
        } else {
            $Actors = $JsonParameters.PSobject.Properties["actors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "translatedName"))) { #optional property not found
            $TranslatedName = $null
        } else {
            $TranslatedName = $JsonParameters.PSobject.Properties["translatedName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currentUserRole"))) { #optional property not found
            $CurrentUserRole = $null
        } else {
            $CurrentUserRole = $JsonParameters.PSobject.Properties["currentUserRole"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default"))) { #optional property not found
            $Default = $null
        } else {
            $Default = $JsonParameters.PSobject.Properties["default"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "admin"))) { #optional property not found
            $Admin = $null
        } else {
            $Admin = $JsonParameters.PSobject.Properties["admin"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "roleConfigurable"))) { #optional property not found
            $RoleConfigurable = $null
        } else {
            $RoleConfigurable = $JsonParameters.PSobject.Properties["roleConfigurable"].value
        }

        $PSO = [PSCustomObject]@{
            "self" = ${Self}
            "name" = ${Name}
            "id" = ${Id}
            "description" = ${Description}
            "actors" = ${Actors}
            "scope" = ${Scope}
            "translatedName" = ${TranslatedName}
            "currentUserRole" = ${CurrentUserRole}
            "default" = ${Default}
            "admin" = ${Admin}
            "roleConfigurable" = ${RoleConfigurable}
        }

        return $PSO
    }

}

