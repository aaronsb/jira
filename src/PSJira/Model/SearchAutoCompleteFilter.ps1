#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of how to filter and list search auto complete information.

.PARAMETER ProjectIds
List of project IDs used to filter the visible field details returned.
.PARAMETER IncludeCollapsedFields
Include collapsed fields for fields that have non-unique names.
.OUTPUTS

SearchAutoCompleteFilter<PSCustomObject>
#>

function Initialize-SearchAutoCompleteFilter {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${ProjectIds},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IncludeCollapsedFields} = $false
    )

    Process {
        'Creating PSCustomObject: PSJira => SearchAutoCompleteFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "projectIds" = ${ProjectIds}
            "includeCollapsedFields" = ${IncludeCollapsedFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SearchAutoCompleteFilter<PSCustomObject>

.DESCRIPTION

Convert from JSON to SearchAutoCompleteFilter<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SearchAutoCompleteFilter<PSCustomObject>
#>
function ConvertFrom-JsonToSearchAutoCompleteFilter {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => SearchAutoCompleteFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SearchAutoCompleteFilter
        $AllProperties = ("projectIds", "includeCollapsedFields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectIds"))) { #optional property not found
            $ProjectIds = $null
        } else {
            $ProjectIds = $JsonParameters.PSobject.Properties["projectIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "includeCollapsedFields"))) { #optional property not found
            $IncludeCollapsedFields = $null
        } else {
            $IncludeCollapsedFields = $JsonParameters.PSobject.Properties["includeCollapsedFields"].value
        }

        $PSO = [PSCustomObject]@{
            "projectIds" = ${ProjectIds}
            "includeCollapsedFields" = ${IncludeCollapsedFields}
        }

        return $PSO
    }

}

