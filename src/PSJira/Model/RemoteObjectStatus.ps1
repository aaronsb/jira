#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The status of the item.

.PARAMETER Resolved
Whether the item is resolved. If set to ""true"", the link to the issue is displayed in a strikethrough font, otherwise the link displays in normal font.
.PARAMETER Icon
No description available.
.OUTPUTS

RemoteObjectStatus<PSCustomObject>
#>

function Initialize-RemoteObjectStatus {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Resolved},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Icon}
    )

    Process {
        'Creating PSCustomObject: PSJira => RemoteObjectStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "resolved" = ${Resolved}
            "icon" = ${Icon}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RemoteObjectStatus<PSCustomObject>

.DESCRIPTION

Convert from JSON to RemoteObjectStatus<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RemoteObjectStatus<PSCustomObject>
#>
function ConvertFrom-JsonToRemoteObjectStatus {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => RemoteObjectStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RemoteObjectStatus
        $AllProperties = ("resolved", "icon")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resolved"))) { #optional property not found
            $Resolved = $null
        } else {
            $Resolved = $JsonParameters.PSobject.Properties["resolved"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "icon"))) { #optional property not found
            $Icon = $null
        } else {
            $Icon = $JsonParameters.PSobject.Properties["icon"].value
        }

        $PSO = [PSCustomObject]@{
            "resolved" = ${Resolved}
            "icon" = ${Icon}
        }

        return $PSO
    }

}

