#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of the issue creation metadata for a project.

.PARAMETER Expand
Expand options that include additional project issue create metadata details in the response.
.PARAMETER Self
The URL of the project.
.PARAMETER Id
The ID of the project.
.PARAMETER Key
The key of the project.
.PARAMETER Name
The name of the project.
.PARAMETER AvatarUrls
No description available.
.PARAMETER Issuetypes
List of the issue types supported by the project.
.OUTPUTS

ProjectIssueCreateMetadata<PSCustomObject>
#>

function Initialize-ProjectIssueCreateMetadata {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Expand},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AvatarUrls},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Issuetypes}
    )

    Process {
        'Creating PSCustomObject: PSJira => ProjectIssueCreateMetadata' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "expand" = ${Expand}
            "self" = ${Self}
            "id" = ${Id}
            "key" = ${Key}
            "name" = ${Name}
            "avatarUrls" = ${AvatarUrls}
            "issuetypes" = ${Issuetypes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProjectIssueCreateMetadata<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProjectIssueCreateMetadata<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProjectIssueCreateMetadata<PSCustomObject>
#>
function ConvertFrom-JsonToProjectIssueCreateMetadata {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ProjectIssueCreateMetadata' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProjectIssueCreateMetadata
        $AllProperties = ("expand", "self", "id", "key", "name", "avatarUrls", "issuetypes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expand"))) { #optional property not found
            $Expand = $null
        } else {
            $Expand = $JsonParameters.PSobject.Properties["expand"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) { #optional property not found
            $Key = $null
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avatarUrls"))) { #optional property not found
            $AvatarUrls = $null
        } else {
            $AvatarUrls = $JsonParameters.PSobject.Properties["avatarUrls"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issuetypes"))) { #optional property not found
            $Issuetypes = $null
        } else {
            $Issuetypes = $JsonParameters.PSobject.Properties["issuetypes"].value
        }

        $PSO = [PSCustomObject]@{
            "expand" = ${Expand}
            "self" = ${Self}
            "id" = ${Id}
            "key" = ${Key}
            "name" = ${Name}
            "avatarUrls" = ${AvatarUrls}
            "issuetypes" = ${Issuetypes}
        }

        return $PSO
    }

}

