#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The number of Jira REST API beans returned in the response.

.PARAMETER Value
The complexity value of the current expression.
.PARAMETER Limit
The maximum allowed complexity. The evaluation will fail if this value is exceeded.
.OUTPUTS

JiraExpressionsComplexityBeanBeans<PSCustomObject>
#>

function Initialize-JiraExpressionsComplexityBeanBeans {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Value},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Limit}
    )

    Process {
        'Creating PSCustomObject: PSJira => JiraExpressionsComplexityBeanBeans' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Value) {
            throw "invalid value for 'Value', 'Value' cannot be null."
        }

        if ($null -eq $Limit) {
            throw "invalid value for 'Limit', 'Limit' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "value" = ${Value}
            "limit" = ${Limit}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to JiraExpressionsComplexityBeanBeans<PSCustomObject>

.DESCRIPTION

Convert from JSON to JiraExpressionsComplexityBeanBeans<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

JiraExpressionsComplexityBeanBeans<PSCustomObject>
#>
function ConvertFrom-JsonToJiraExpressionsComplexityBeanBeans {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => JiraExpressionsComplexityBeanBeans' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in JiraExpressionsComplexityBeanBeans
        $AllProperties = ("value", "limit")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'value' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) {
            throw "Error! JSON cannot be serialized due to the required property 'value' missing."
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "limit"))) {
            throw "Error! JSON cannot be serialized due to the required property 'limit' missing."
        } else {
            $Limit = $JsonParameters.PSobject.Properties["limit"].value
        }

        $PSO = [PSCustomObject]@{
            "value" = ${Value}
            "limit" = ${Limit}
        }

        return $PSO
    }

}

