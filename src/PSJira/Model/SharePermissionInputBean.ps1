#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Type
The type of the share permission.Specify the type as follows:   *  `user` Share with a user.  *  `group` Share with a group. Specify `groupname` as well.  *  `project` Share with a project. Specify `projectId` as well.  *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.  *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.  *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
.PARAMETER ProjectId
The ID of the project to share the filter with. Set `type` to `project`.
.PARAMETER Groupname
The name of the group to share the filter with. Set `type` to `group`. Please note that the name of a group is mutable, to reliably identify a group use `groupId`.
.PARAMETER ProjectRoleId
The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in.
.PARAMETER AccountId
The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.
.PARAMETER Rights
The rights for the share permission.
.PARAMETER GroupId
The ID of the group, which uniquely identifies the group across all Atlassian products.For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. Cannot be provided with `groupname`.
.OUTPUTS

SharePermissionInputBean<PSCustomObject>
#>

function Initialize-SharePermissionInputBean {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("user", "project", "group", "projectRole", "global", "authenticated")]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProjectId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Groupname},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProjectRoleId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccountId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Rights},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupId}
    )

    Process {
        'Creating PSCustomObject: PSJira => SharePermissionInputBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "projectId" = ${ProjectId}
            "groupname" = ${Groupname}
            "projectRoleId" = ${ProjectRoleId}
            "accountId" = ${AccountId}
            "rights" = ${Rights}
            "groupId" = ${GroupId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SharePermissionInputBean<PSCustomObject>

.DESCRIPTION

Convert from JSON to SharePermissionInputBean<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SharePermissionInputBean<PSCustomObject>
#>
function ConvertFrom-JsonToSharePermissionInputBean {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => SharePermissionInputBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SharePermissionInputBean
        $AllProperties = ("type", "projectId", "groupname", "projectRoleId", "accountId", "rights", "groupId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectId"))) { #optional property not found
            $ProjectId = $null
        } else {
            $ProjectId = $JsonParameters.PSobject.Properties["projectId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupname"))) { #optional property not found
            $Groupname = $null
        } else {
            $Groupname = $JsonParameters.PSobject.Properties["groupname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectRoleId"))) { #optional property not found
            $ProjectRoleId = $null
        } else {
            $ProjectRoleId = $JsonParameters.PSobject.Properties["projectRoleId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountId"))) { #optional property not found
            $AccountId = $null
        } else {
            $AccountId = $JsonParameters.PSobject.Properties["accountId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rights"))) { #optional property not found
            $Rights = $null
        } else {
            $Rights = $JsonParameters.PSobject.Properties["rights"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupId"))) { #optional property not found
            $GroupId = $null
        } else {
            $GroupId = $JsonParameters.PSobject.Properties["groupId"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "projectId" = ${ProjectId}
            "groupname" = ${Groupname}
            "projectRoleId" = ${ProjectRoleId}
            "accountId" = ${AccountId}
            "rights" = ${Rights}
            "groupId" = ${GroupId}
        }

        return $PSO
    }

}

