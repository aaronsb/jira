#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about an issue.

.PARAMETER Expand
Expand options that include additional issue details in the response.
.PARAMETER Id
The ID of the issue.
.PARAMETER Self
The URL of the issue details.
.PARAMETER Key
The key of the issue.
.PARAMETER RenderedFields
The rendered value of each field present on the issue.
.PARAMETER Properties
Details of the issue properties identified in the request.
.PARAMETER Names
The ID and name of each field present on the issue.
.PARAMETER Schema
The schema describing each field present on the issue.
.PARAMETER Transitions
The transitions that can be performed on the issue.
.PARAMETER Operations
No description available.
.PARAMETER Editmeta
No description available.
.PARAMETER Changelog
No description available.
.PARAMETER VersionedRepresentations
The versions of each field on the issue.
.PARAMETER FieldsToInclude
No description available.
.PARAMETER Fields
No description available.
.OUTPUTS

IssueBean<PSCustomObject>
#>

function Initialize-IssueBean {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Expand},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${RenderedFields},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Properties},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Names},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Schema},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Transitions},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Operations},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Editmeta},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Changelog},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${VersionedRepresentations},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FieldsToInclude},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Fields}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssueBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "expand" = ${Expand}
            "id" = ${Id}
            "self" = ${Self}
            "key" = ${Key}
            "renderedFields" = ${RenderedFields}
            "properties" = ${Properties}
            "names" = ${Names}
            "schema" = ${Schema}
            "transitions" = ${Transitions}
            "operations" = ${Operations}
            "editmeta" = ${Editmeta}
            "changelog" = ${Changelog}
            "versionedRepresentations" = ${VersionedRepresentations}
            "fieldsToInclude" = ${FieldsToInclude}
            "fields" = ${Fields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssueBean<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssueBean<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssueBean<PSCustomObject>
#>
function ConvertFrom-JsonToIssueBean {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssueBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssueBean
        $AllProperties = ("expand", "id", "self", "key", "renderedFields", "properties", "names", "schema", "transitions", "operations", "editmeta", "changelog", "versionedRepresentations", "fieldsToInclude", "fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expand"))) { #optional property not found
            $Expand = $null
        } else {
            $Expand = $JsonParameters.PSobject.Properties["expand"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) { #optional property not found
            $Key = $null
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "renderedFields"))) { #optional property not found
            $RenderedFields = $null
        } else {
            $RenderedFields = $JsonParameters.PSobject.Properties["renderedFields"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "properties"))) { #optional property not found
            $Properties = $null
        } else {
            $Properties = $JsonParameters.PSobject.Properties["properties"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "names"))) { #optional property not found
            $Names = $null
        } else {
            $Names = $JsonParameters.PSobject.Properties["names"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schema"))) { #optional property not found
            $Schema = $null
        } else {
            $Schema = $JsonParameters.PSobject.Properties["schema"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transitions"))) { #optional property not found
            $Transitions = $null
        } else {
            $Transitions = $JsonParameters.PSobject.Properties["transitions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operations"))) { #optional property not found
            $Operations = $null
        } else {
            $Operations = $JsonParameters.PSobject.Properties["operations"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "editmeta"))) { #optional property not found
            $Editmeta = $null
        } else {
            $Editmeta = $JsonParameters.PSobject.Properties["editmeta"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "changelog"))) { #optional property not found
            $Changelog = $null
        } else {
            $Changelog = $JsonParameters.PSobject.Properties["changelog"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "versionedRepresentations"))) { #optional property not found
            $VersionedRepresentations = $null
        } else {
            $VersionedRepresentations = $JsonParameters.PSobject.Properties["versionedRepresentations"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fieldsToInclude"))) { #optional property not found
            $FieldsToInclude = $null
        } else {
            $FieldsToInclude = $JsonParameters.PSobject.Properties["fieldsToInclude"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fields"))) { #optional property not found
            $Fields = $null
        } else {
            $Fields = $JsonParameters.PSobject.Properties["fields"].value
        }

        $PSO = [PSCustomObject]@{
            "expand" = ${Expand}
            "id" = ${Id}
            "self" = ${Self}
            "key" = ${Key}
            "renderedFields" = ${RenderedFields}
            "properties" = ${Properties}
            "names" = ${Names}
            "schema" = ${Schema}
            "transitions" = ${Transitions}
            "operations" = ${Operations}
            "editmeta" = ${Editmeta}
            "changelog" = ${Changelog}
            "versionedRepresentations" = ${VersionedRepresentations}
            "fieldsToInclude" = ${FieldsToInclude}
            "fields" = ${Fields}
        }

        return $PSO
    }

}

