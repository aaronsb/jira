#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Key fields from the linked issue.

.PARAMETER Summary
The summary description of the linked issue.
.PARAMETER Status
No description available.
.PARAMETER Priority
No description available.
.PARAMETER Assignee
No description available.
.PARAMETER Timetracking
No description available.
.PARAMETER Issuetype
No description available.
.OUTPUTS

Fields<PSCustomObject>
#>

function Initialize-Fields {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Summary},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Priority},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Assignee},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Timetracking},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Issuetype}
    )

    Process {
        'Creating PSCustomObject: PSJira => Fields' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "summary" = ${Summary}
            "status" = ${Status}
            "priority" = ${Priority}
            "assignee" = ${Assignee}
            "timetracking" = ${Timetracking}
            "issuetype" = ${Issuetype}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Fields<PSCustomObject>

.DESCRIPTION

Convert from JSON to Fields<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Fields<PSCustomObject>
#>
function ConvertFrom-JsonToFields {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => Fields' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Fields
        $AllProperties = ("summary", "status", "priority", "assignee", "timetracking", "issueType")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "summary"))) { #optional property not found
            $Summary = $null
        } else {
            $Summary = $JsonParameters.PSobject.Properties["summary"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priority"))) { #optional property not found
            $Priority = $null
        } else {
            $Priority = $JsonParameters.PSobject.Properties["priority"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assignee"))) { #optional property not found
            $Assignee = $null
        } else {
            $Assignee = $JsonParameters.PSobject.Properties["assignee"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timetracking"))) { #optional property not found
            $Timetracking = $null
        } else {
            $Timetracking = $JsonParameters.PSobject.Properties["timetracking"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issuetype"))) { #optional property not found
            $Issuetype = $null
        } else {
            $Issuetype = $JsonParameters.PSobject.Properties["issuetype"].value
        }

        $PSO = [PSCustomObject]@{
            "summary" = ${Summary}
            "status" = ${Status}
            "priority" = ${Priority}
            "assignee" = ${Assignee}
            "timetracking" = ${Timetracking}
            "issuetype" = ${Issuetype}
        }

        return $PSO
    }

}

