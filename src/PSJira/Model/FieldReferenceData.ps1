#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of a field that can be used in advanced searches.

.PARAMETER Value
The field identifier.
.PARAMETER DisplayName
The display name contains the following:   *  for system fields, the field name. For example, `Summary`.  *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.  *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.
.PARAMETER Orderable
Whether the field can be used in a query's `ORDER BY` clause.
.PARAMETER Searchable
Whether the content of this field can be searched.
.PARAMETER Deprecated
Whether this field has been deprecated.
.PARAMETER DeprecatedSearcherKey
The searcher key of the field, only passed when the field is deprecated.
.PARAMETER Auto
Whether the field provide auto-complete suggestions.
.PARAMETER Cfid
If the item is a custom field, the ID of the custom field.
.PARAMETER Operators
The valid search operators for the field.
.PARAMETER Types
The data types of items in the field.
.OUTPUTS

FieldReferenceData<PSCustomObject>
#>

function Initialize-FieldReferenceData {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("true", "false")]
        [String]
        ${Orderable},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("true", "false")]
        [String]
        ${Searchable},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("true", "false")]
        [String]
        ${Deprecated},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeprecatedSearcherKey},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("true", "false")]
        [String]
        ${Auto},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cfid},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Operators},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Types}
    )

    Process {
        'Creating PSCustomObject: PSJira => FieldReferenceData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "value" = ${Value}
            "displayName" = ${DisplayName}
            "orderable" = ${Orderable}
            "searchable" = ${Searchable}
            "deprecated" = ${Deprecated}
            "deprecatedSearcherKey" = ${DeprecatedSearcherKey}
            "auto" = ${Auto}
            "cfid" = ${Cfid}
            "operators" = ${Operators}
            "types" = ${Types}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FieldReferenceData<PSCustomObject>

.DESCRIPTION

Convert from JSON to FieldReferenceData<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FieldReferenceData<PSCustomObject>
#>
function ConvertFrom-JsonToFieldReferenceData {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => FieldReferenceData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FieldReferenceData
        $AllProperties = ("value", "displayName", "orderable", "searchable", "deprecated", "deprecatedSearcherKey", "auto", "cfid", "operators", "types")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "orderable"))) { #optional property not found
            $Orderable = $null
        } else {
            $Orderable = $JsonParameters.PSobject.Properties["orderable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "searchable"))) { #optional property not found
            $Searchable = $null
        } else {
            $Searchable = $JsonParameters.PSobject.Properties["searchable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deprecated"))) { #optional property not found
            $Deprecated = $null
        } else {
            $Deprecated = $JsonParameters.PSobject.Properties["deprecated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deprecatedSearcherKey"))) { #optional property not found
            $DeprecatedSearcherKey = $null
        } else {
            $DeprecatedSearcherKey = $JsonParameters.PSobject.Properties["deprecatedSearcherKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "auto"))) { #optional property not found
            $Auto = $null
        } else {
            $Auto = $JsonParameters.PSobject.Properties["auto"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cfid"))) { #optional property not found
            $Cfid = $null
        } else {
            $Cfid = $JsonParameters.PSobject.Properties["cfid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operators"))) { #optional property not found
            $Operators = $null
        } else {
            $Operators = $JsonParameters.PSobject.Properties["operators"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "types"))) { #optional property not found
            $Types = $null
        } else {
            $Types = $JsonParameters.PSobject.Properties["types"].value
        }

        $PSO = [PSCustomObject]@{
            "value" = ${Value}
            "displayName" = ${DisplayName}
            "orderable" = ${Orderable}
            "searchable" = ${Searchable}
            "deprecated" = ${Deprecated}
            "deprecatedSearcherKey" = ${DeprecatedSearcherKey}
            "auto" = ${Auto}
            "cfid" = ${Cfid}
            "operators" = ${Operators}
            "types" = ${Types}
        }

        return $PSO
    }

}

