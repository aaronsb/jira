#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of the contextual configuration for a custom field.

.PARAMETER Id
The ID of the configuration.
.PARAMETER FieldContextId
The ID of the field context the configuration is associated with.
.PARAMETER Configuration
The field configuration.
.PARAMETER Schema
The field value schema.
.OUTPUTS

ContextualConfiguration<PSCustomObject>
#>

function Initialize-ContextualConfiguration {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FieldContextId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Configuration},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Schema}
    )

    Process {
        'Creating PSCustomObject: PSJira => ContextualConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $FieldContextId) {
            throw "invalid value for 'FieldContextId', 'FieldContextId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "fieldContextId" = ${FieldContextId}
            "configuration" = ${Configuration}
            "schema" = ${Schema}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ContextualConfiguration<PSCustomObject>

.DESCRIPTION

Convert from JSON to ContextualConfiguration<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ContextualConfiguration<PSCustomObject>
#>
function ConvertFrom-JsonToContextualConfiguration {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ContextualConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ContextualConfiguration
        $AllProperties = ("id", "fieldContextId", "configuration", "schema")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fieldContextId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'fieldContextId' missing."
        } else {
            $FieldContextId = $JsonParameters.PSobject.Properties["fieldContextId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "configuration"))) { #optional property not found
            $Configuration = $null
        } else {
            $Configuration = $JsonParameters.PSobject.Properties["configuration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schema"))) { #optional property not found
            $Schema = $null
        } else {
            $Schema = $JsonParameters.PSobject.Properties["schema"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "fieldContextId" = ${FieldContextId}
            "configuration" = ${Configuration}
            "schema" = ${Schema}
        }

        return $PSO
    }

}

