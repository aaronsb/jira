#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about a notification.

.PARAMETER Subject
The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary.
.PARAMETER TextBody
The plain text body of the email notification for the issue.
.PARAMETER HtmlBody
The HTML body of the email notification for the issue.
.PARAMETER To
No description available.
.PARAMETER Restrict
No description available.
.OUTPUTS

Notification<PSCustomObject>
#>

function Initialize-Notification {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subject},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TextBody},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HtmlBody},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${To},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Restrict}
    )

    Process {
        'Creating PSCustomObject: PSJira => Notification' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "subject" = ${Subject}
            "textBody" = ${TextBody}
            "htmlBody" = ${HtmlBody}
            "to" = ${To}
            "restrict" = ${Restrict}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Notification<PSCustomObject>

.DESCRIPTION

Convert from JSON to Notification<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Notification<PSCustomObject>
#>
function ConvertFrom-JsonToNotification {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => Notification' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $NotificationAdditionalProperties = @{}

        # check if Json contains properties not defined in Notification
        $AllProperties = ("subject", "textBody", "htmlBody", "to", "restrict")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $NotificationAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subject"))) { #optional property not found
            $Subject = $null
        } else {
            $Subject = $JsonParameters.PSobject.Properties["subject"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "textBody"))) { #optional property not found
            $TextBody = $null
        } else {
            $TextBody = $JsonParameters.PSobject.Properties["textBody"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "htmlBody"))) { #optional property not found
            $HtmlBody = $null
        } else {
            $HtmlBody = $JsonParameters.PSobject.Properties["htmlBody"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "to"))) { #optional property not found
            $To = $null
        } else {
            $To = $JsonParameters.PSobject.Properties["to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "restrict"))) { #optional property not found
            $Restrict = $null
        } else {
            $Restrict = $JsonParameters.PSobject.Properties["restrict"].value
        }

        $PSO = [PSCustomObject]@{
            "subject" = ${Subject}
            "textBody" = ${TextBody}
            "htmlBody" = ${HtmlBody}
            "to" = ${To}
            "restrict" = ${Restrict}
            "AdditionalProperties" = $NotificationAdditionalProperties
        }

        return $PSO
    }

}

