#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about a failed webhook.

.PARAMETER Id
The webhook ID, as sent in the `X-Atlassian-Webhook-Identifier` header with the webhook.
.PARAMETER Body
The webhook body.
.PARAMETER Url
The original webhook destination.
.PARAMETER FailureTime
The time the webhook was added to the list of failed webhooks (that is, the time of the last failed retry).
.OUTPUTS

FailedWebhook<PSCustomObject>
#>

function Initialize-FailedWebhook {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Body},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${FailureTime}
    )

    Process {
        'Creating PSCustomObject: PSJira => FailedWebhook' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $FailureTime) {
            throw "invalid value for 'FailureTime', 'FailureTime' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "body" = ${Body}
            "url" = ${Url}
            "failureTime" = ${FailureTime}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FailedWebhook<PSCustomObject>

.DESCRIPTION

Convert from JSON to FailedWebhook<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FailedWebhook<PSCustomObject>
#>
function ConvertFrom-JsonToFailedWebhook {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => FailedWebhook' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FailedWebhook
        $AllProperties = ("id", "body", "url", "failureTime")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failureTime"))) {
            throw "Error! JSON cannot be serialized due to the required property 'failureTime' missing."
        } else {
            $FailureTime = $JsonParameters.PSobject.Properties["failureTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "body"))) { #optional property not found
            $Body = $null
        } else {
            $Body = $JsonParameters.PSobject.Properties["body"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "body" = ${Body}
            "url" = ${Url}
            "failureTime" = ${FailureTime}
        }

        return $PSO
    }

}

