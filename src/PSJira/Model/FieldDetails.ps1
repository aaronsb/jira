#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about a field.

.PARAMETER Id
The ID of the field.
.PARAMETER Key
The key of the field.
.PARAMETER Name
The name of the field.
.PARAMETER Custom
Whether the field is a custom field.
.PARAMETER Orderable
Whether the content of the field can be used to order lists.
.PARAMETER Navigable
Whether the field can be used as a column on the issue navigator.
.PARAMETER Searchable
Whether the content of the field can be searched.
.PARAMETER ClauseNames
The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).
.PARAMETER Scope
No description available.
.PARAMETER Schema
No description available.
.OUTPUTS

FieldDetails<PSCustomObject>
#>

function Initialize-FieldDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Custom},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Orderable},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Navigable},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Searchable},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ClauseNames},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Scope},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Schema}
    )

    Process {
        'Creating PSCustomObject: PSJira => FieldDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "key" = ${Key}
            "name" = ${Name}
            "custom" = ${Custom}
            "orderable" = ${Orderable}
            "navigable" = ${Navigable}
            "searchable" = ${Searchable}
            "clauseNames" = ${ClauseNames}
            "scope" = ${Scope}
            "schema" = ${Schema}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FieldDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to FieldDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FieldDetails<PSCustomObject>
#>
function ConvertFrom-JsonToFieldDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => FieldDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FieldDetails
        $AllProperties = ("id", "key", "name", "custom", "orderable", "navigable", "searchable", "clauseNames", "scope", "schema")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) { #optional property not found
            $Key = $null
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom"))) { #optional property not found
            $Custom = $null
        } else {
            $Custom = $JsonParameters.PSobject.Properties["custom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "orderable"))) { #optional property not found
            $Orderable = $null
        } else {
            $Orderable = $JsonParameters.PSobject.Properties["orderable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "navigable"))) { #optional property not found
            $Navigable = $null
        } else {
            $Navigable = $JsonParameters.PSobject.Properties["navigable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "searchable"))) { #optional property not found
            $Searchable = $null
        } else {
            $Searchable = $JsonParameters.PSobject.Properties["searchable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clauseNames"))) { #optional property not found
            $ClauseNames = $null
        } else {
            $ClauseNames = $JsonParameters.PSobject.Properties["clauseNames"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schema"))) { #optional property not found
            $Schema = $null
        } else {
            $Schema = $JsonParameters.PSobject.Properties["schema"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "key" = ${Key}
            "name" = ${Name}
            "custom" = ${Custom}
            "orderable" = ${Orderable}
            "navigable" = ${Navigable}
            "searchable" = ${Searchable}
            "clauseNames" = ${ClauseNames}
            "scope" = ${Scope}
            "schema" = ${Schema}
        }

        return $PSO
    }

}

