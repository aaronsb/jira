#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A collection of transition rules.

.PARAMETER ConditionsTree
No description available.
.PARAMETER Validators
The workflow validators.
.PARAMETER PostFunctions
The workflow post functions.
.OUTPUTS

WorkflowRules<PSCustomObject>
#>

function Initialize-WorkflowRules {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ConditionsTree},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Validators},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${PostFunctions}
    )

    Process {
        'Creating PSCustomObject: PSJira => WorkflowRules' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "conditionsTree" = ${ConditionsTree}
            "validators" = ${Validators}
            "postFunctions" = ${PostFunctions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowRules<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowRules<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowRules<PSCustomObject>
#>
function ConvertFrom-JsonToWorkflowRules {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => WorkflowRules' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WorkflowRules
        $AllProperties = ("conditionsTree", "validators", "postFunctions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "conditionsTree"))) { #optional property not found
            $ConditionsTree = $null
        } else {
            $ConditionsTree = $JsonParameters.PSobject.Properties["conditionsTree"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validators"))) { #optional property not found
            $Validators = $null
        } else {
            $Validators = $JsonParameters.PSobject.Properties["validators"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "postFunctions"))) { #optional property not found
            $PostFunctions = $null
        } else {
            $PostFunctions = $JsonParameters.PSobject.Properties["postFunctions"].value
        }

        $PSO = [PSCustomObject]@{
            "conditionsTree" = ${ConditionsTree}
            "validators" = ${Validators}
            "postFunctions" = ${PostFunctions}
        }

        return $PSO
    }

}

