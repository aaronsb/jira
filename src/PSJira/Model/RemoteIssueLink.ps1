#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of an issue remote link.

.PARAMETER Id
The ID of the link.
.PARAMETER Self
The URL of the link.
.PARAMETER GlobalId
The global ID of the link, such as the ID of the item on the remote system.
.PARAMETER Application
No description available.
.PARAMETER Relationship
Description of the relationship between the issue and the linked item.
.PARAMETER Object
No description available.
.OUTPUTS

RemoteIssueLink<PSCustomObject>
#>

function Initialize-RemoteIssueLink {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GlobalId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Application},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Relationship},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Object}
    )

    Process {
        'Creating PSCustomObject: PSJira => RemoteIssueLink' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "self" = ${Self}
            "globalId" = ${GlobalId}
            "application" = ${Application}
            "relationship" = ${Relationship}
            "object" = ${Object}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RemoteIssueLink<PSCustomObject>

.DESCRIPTION

Convert from JSON to RemoteIssueLink<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RemoteIssueLink<PSCustomObject>
#>
function ConvertFrom-JsonToRemoteIssueLink {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => RemoteIssueLink' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RemoteIssueLink
        $AllProperties = ("id", "self", "globalId", "application", "relationship", "object")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "globalId"))) { #optional property not found
            $GlobalId = $null
        } else {
            $GlobalId = $JsonParameters.PSobject.Properties["globalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "application"))) { #optional property not found
            $Application = $null
        } else {
            $Application = $JsonParameters.PSobject.Properties["application"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "relationship"))) { #optional property not found
            $Relationship = $null
        } else {
            $Relationship = $JsonParameters.PSobject.Properties["relationship"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object"))) { #optional property not found
            $Object = $null
        } else {
            $Object = $JsonParameters.PSobject.Properties["object"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "self" = ${Self}
            "globalId" = ${GlobalId}
            "application" = ${Application}
            "relationship" = ${Relationship}
            "object" = ${Object}
        }

        return $PSO
    }

}

