#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of the icon representing the status. If not provided, no status icon displays in Jira.

.PARAMETER Url16x16
The URL of an icon that displays at 16x16 pixel in Jira.
.PARAMETER Title
The title of the icon. This is used as follows:   *  For a status icon it is used as a tooltip on the icon. If not set, the status icon doesn't display a tooltip in Jira.  *  For the remote object icon it is used in conjunction with the application name to display a tooltip for the link's icon. The tooltip takes the format ""\[application name\] icon title"". Blank itemsare excluded from the tooltip title. If both items are blank, the icon tooltop displays as ""Web Link"".
.PARAMETER Link
The URL of the tooltip, used only for a status icon. If not set, the status icon in Jira is not clickable.
.OUTPUTS

StatusIcon<PSCustomObject>
#>

function Initialize-StatusIcon {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url16x16},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Link}
    )

    Process {
        'Creating PSCustomObject: PSJira => StatusIcon' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "url16x16" = ${Url16x16}
            "title" = ${Title}
            "link" = ${Link}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to StatusIcon<PSCustomObject>

.DESCRIPTION

Convert from JSON to StatusIcon<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

StatusIcon<PSCustomObject>
#>
function ConvertFrom-JsonToStatusIcon {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => StatusIcon' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in StatusIcon
        $AllProperties = ("url16x16", "title", "link")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url16x16"))) { #optional property not found
            $Url16x16 = $null
        } else {
            $Url16x16 = $JsonParameters.PSobject.Properties["url16x16"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link"))) { #optional property not found
            $Link = $null
        } else {
            $Link = $JsonParameters.PSobject.Properties["link"].value
        }

        $PSO = [PSCustomObject]@{
            "url16x16" = ${Url16x16}
            "title" = ${Title}
            "link" = ${Link}
        }

        return $PSO
    }

}

