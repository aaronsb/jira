#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A group found in a search.

.PARAMETER Name
The name of the group. The name of a group is mutable, to reliably identify a group use ``groupId`.`
.PARAMETER Html
The group name with the matched query string highlighted with the HTML bold tag.
.PARAMETER Labels
No description available.
.PARAMETER GroupId
The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
.OUTPUTS

FoundGroup<PSCustomObject>
#>

function Initialize-FoundGroup {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Html},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Labels},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupId}
    )

    Process {
        'Creating PSCustomObject: PSJira => FoundGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "html" = ${Html}
            "labels" = ${Labels}
            "groupId" = ${GroupId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FoundGroup<PSCustomObject>

.DESCRIPTION

Convert from JSON to FoundGroup<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FoundGroup<PSCustomObject>
#>
function ConvertFrom-JsonToFoundGroup {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => FoundGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FoundGroup
        $AllProperties = ("name", "html", "labels", "groupId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "html"))) { #optional property not found
            $Html = $null
        } else {
            $Html = $JsonParameters.PSobject.Properties["html"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["labels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupId"))) { #optional property not found
            $GroupId = $null
        } else {
            $GroupId = $JsonParameters.PSobject.Properties["groupId"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "html" = ${Html}
            "labels" = ${Labels}
            "groupId" = ${GroupId}
        }

        return $PSO
    }

}

