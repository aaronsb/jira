#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The position of the gadget. When the gadget is placed into the position, other gadgets in the same column are moved down to accommodate it.

.PARAMETER TheRowPositionOfTheGadget
No description available.
.PARAMETER TheColumnPositionOfTheGadget
No description available.
.OUTPUTS

DashboardGadgetSettingsPosition<PSCustomObject>
#>

function Initialize-DashboardGadgetSettingsPosition {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${TheRowPositionOfTheGadget},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${TheColumnPositionOfTheGadget}
    )

    Process {
        'Creating PSCustomObject: PSJira => DashboardGadgetSettingsPosition' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $TheRowPositionOfTheGadget) {
            throw "invalid value for 'TheRowPositionOfTheGadget', 'TheRowPositionOfTheGadget' cannot be null."
        }

        if ($null -eq $TheColumnPositionOfTheGadget) {
            throw "invalid value for 'TheColumnPositionOfTheGadget', 'TheColumnPositionOfTheGadget' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "The row position of the gadget." = ${TheRowPositionOfTheGadget}
            "The column position of the gadget." = ${TheColumnPositionOfTheGadget}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DashboardGadgetSettingsPosition<PSCustomObject>

.DESCRIPTION

Convert from JSON to DashboardGadgetSettingsPosition<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DashboardGadgetSettingsPosition<PSCustomObject>
#>
function ConvertFrom-JsonToDashboardGadgetSettingsPosition {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => DashboardGadgetSettingsPosition' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DashboardGadgetSettingsPosition
        $AllProperties = ("The row position of the gadget.", "The column position of the gadget.")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'The row position of the gadget.' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "The row position of the gadget."))) {
            throw "Error! JSON cannot be serialized due to the required property 'The row position of the gadget.' missing."
        } else {
            $TheRowPositionOfTheGadget = $JsonParameters.PSobject.Properties["The row position of the gadget."].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "The column position of the gadget."))) {
            throw "Error! JSON cannot be serialized due to the required property 'The column position of the gadget.' missing."
        } else {
            $TheColumnPositionOfTheGadget = $JsonParameters.PSobject.Properties["The column position of the gadget."].value
        }

        $PSO = [PSCustomObject]@{
            "The row position of the gadget." = ${TheRowPositionOfTheGadget}
            "The column position of the gadget." = ${TheColumnPositionOfTheGadget}
        }

        return $PSO
    }

}

