#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of an application role.

.PARAMETER Key
The key of the application role.
.PARAMETER Groups
The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups.
.PARAMETER GroupDetails
The groups associated with the application role.
.PARAMETER Name
The display name of the application role.
.PARAMETER DefaultGroups
The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups.
.PARAMETER DefaultGroupsDetails
The groups that are granted default access for this application role.
.PARAMETER SelectedByDefault
Determines whether this application role should be selected by default on user creation.
.PARAMETER Defined
Deprecated.
.PARAMETER NumberOfSeats
The maximum count of users on your license.
.PARAMETER RemainingSeats
The count of users remaining on your license.
.PARAMETER UserCount
The number of users counting against your license.
.PARAMETER UserCountDescription
The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.
.PARAMETER HasUnlimitedSeats
No description available.
.PARAMETER Platform
Indicates if the application role belongs to Jira platform (`jira-core`).
.OUTPUTS

ApplicationRole<PSCustomObject>
#>

function Initialize-ApplicationRole {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Groups},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${GroupDetails},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${DefaultGroups},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${DefaultGroupsDetails},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SelectedByDefault},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Defined},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NumberOfSeats},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RemainingSeats},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UserCount},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserCountDescription},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasUnlimitedSeats},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Platform}
    )

    Process {
        'Creating PSCustomObject: PSJira => ApplicationRole' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "key" = ${Key}
            "groups" = ${Groups}
            "groupDetails" = ${GroupDetails}
            "name" = ${Name}
            "defaultGroups" = ${DefaultGroups}
            "defaultGroupsDetails" = ${DefaultGroupsDetails}
            "selectedByDefault" = ${SelectedByDefault}
            "defined" = ${Defined}
            "numberOfSeats" = ${NumberOfSeats}
            "remainingSeats" = ${RemainingSeats}
            "userCount" = ${UserCount}
            "userCountDescription" = ${UserCountDescription}
            "hasUnlimitedSeats" = ${HasUnlimitedSeats}
            "platform" = ${Platform}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApplicationRole<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApplicationRole<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApplicationRole<PSCustomObject>
#>
function ConvertFrom-JsonToApplicationRole {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ApplicationRole' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApplicationRole
        $AllProperties = ("key", "groups", "groupDetails", "name", "defaultGroups", "defaultGroupsDetails", "selectedByDefault", "defined", "numberOfSeats", "remainingSeats", "userCount", "userCountDescription", "hasUnlimitedSeats", "platform")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) { #optional property not found
            $Key = $null
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groups"))) { #optional property not found
            $Groups = $null
        } else {
            $Groups = $JsonParameters.PSobject.Properties["groups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupDetails"))) { #optional property not found
            $GroupDetails = $null
        } else {
            $GroupDetails = $JsonParameters.PSobject.Properties["groupDetails"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultGroups"))) { #optional property not found
            $DefaultGroups = $null
        } else {
            $DefaultGroups = $JsonParameters.PSobject.Properties["defaultGroups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultGroupsDetails"))) { #optional property not found
            $DefaultGroupsDetails = $null
        } else {
            $DefaultGroupsDetails = $JsonParameters.PSobject.Properties["defaultGroupsDetails"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "selectedByDefault"))) { #optional property not found
            $SelectedByDefault = $null
        } else {
            $SelectedByDefault = $JsonParameters.PSobject.Properties["selectedByDefault"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defined"))) { #optional property not found
            $Defined = $null
        } else {
            $Defined = $JsonParameters.PSobject.Properties["defined"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numberOfSeats"))) { #optional property not found
            $NumberOfSeats = $null
        } else {
            $NumberOfSeats = $JsonParameters.PSobject.Properties["numberOfSeats"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remainingSeats"))) { #optional property not found
            $RemainingSeats = $null
        } else {
            $RemainingSeats = $JsonParameters.PSobject.Properties["remainingSeats"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userCount"))) { #optional property not found
            $UserCount = $null
        } else {
            $UserCount = $JsonParameters.PSobject.Properties["userCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userCountDescription"))) { #optional property not found
            $UserCountDescription = $null
        } else {
            $UserCountDescription = $JsonParameters.PSobject.Properties["userCountDescription"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasUnlimitedSeats"))) { #optional property not found
            $HasUnlimitedSeats = $null
        } else {
            $HasUnlimitedSeats = $JsonParameters.PSobject.Properties["hasUnlimitedSeats"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "platform"))) { #optional property not found
            $Platform = $null
        } else {
            $Platform = $JsonParameters.PSobject.Properties["platform"].value
        }

        $PSO = [PSCustomObject]@{
            "key" = ${Key}
            "groups" = ${Groups}
            "groupDetails" = ${GroupDetails}
            "name" = ${Name}
            "defaultGroups" = ${DefaultGroups}
            "defaultGroupsDetails" = ${DefaultGroupsDetails}
            "selectedByDefault" = ${SelectedByDefault}
            "defined" = ${Defined}
            "numberOfSeats" = ${NumberOfSeats}
            "remainingSeats" = ${RemainingSeats}
            "userCount" = ${UserCount}
            "userCountDescription" = ${UserCountDescription}
            "hasUnlimitedSeats" = ${HasUnlimitedSeats}
            "platform" = ${Platform}
        }

        return $PSO
    }

}

