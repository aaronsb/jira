#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
.PARAMETER AccountId
The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
.OUTPUTS

UpdateUserToGroupBean<PSCustomObject>
#>

function Initialize-UpdateUserToGroupBean {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccountId}
    )

    Process {
        'Creating PSCustomObject: PSJira => UpdateUserToGroupBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$AccountId -and $AccountId.length -gt 128) {
            throw "invalid value for 'AccountId', the character length must be smaller than or equal to 128."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "accountId" = ${AccountId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UpdateUserToGroupBean<PSCustomObject>

.DESCRIPTION

Convert from JSON to UpdateUserToGroupBean<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UpdateUserToGroupBean<PSCustomObject>
#>
function ConvertFrom-JsonToUpdateUserToGroupBean {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => UpdateUserToGroupBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $UpdateUserToGroupBeanAdditionalProperties = @{}

        # check if Json contains properties not defined in UpdateUserToGroupBean
        $AllProperties = ("name", "accountId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $UpdateUserToGroupBeanAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountId"))) { #optional property not found
            $AccountId = $null
        } else {
            $AccountId = $JsonParameters.PSobject.Properties["accountId"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "accountId" = ${AccountId}
            "AdditionalProperties" = $UpdateUserToGroupBeanAdditionalProperties
        }

        return $PSO
    }

}

