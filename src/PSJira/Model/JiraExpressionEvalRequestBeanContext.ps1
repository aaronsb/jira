#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The context in which the Jira expression is evaluated.

.PARAMETER Issue
No description available.
.PARAMETER Issues
No description available.
.PARAMETER Project
No description available.
.PARAMETER Sprint
The ID of the sprint that is available under the `sprint` variable when evaluating the expression.
.PARAMETER Board
The ID of the board that is available under the `board` variable when evaluating the expression.
.PARAMETER ServiceDesk
The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.
.PARAMETER CustomerRequest
The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.
.PARAMETER Custom
Custom context variables and their types. These variable types are available for use in a custom context:   *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.  *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.  *  `json`: A JSON object containing custom content.  *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
.OUTPUTS

JiraExpressionEvalRequestBeanContext<PSCustomObject>
#>

function Initialize-JiraExpressionEvalRequestBeanContext {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Issue},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Issues},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Project},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Sprint},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Board},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ServiceDesk},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CustomerRequest},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Custom}
    )

    Process {
        'Creating PSCustomObject: PSJira => JiraExpressionEvalRequestBeanContext' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "issue" = ${Issue}
            "issues" = ${Issues}
            "project" = ${Project}
            "sprint" = ${Sprint}
            "board" = ${Board}
            "serviceDesk" = ${ServiceDesk}
            "customerRequest" = ${CustomerRequest}
            "custom" = ${Custom}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to JiraExpressionEvalRequestBeanContext<PSCustomObject>

.DESCRIPTION

Convert from JSON to JiraExpressionEvalRequestBeanContext<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

JiraExpressionEvalRequestBeanContext<PSCustomObject>
#>
function ConvertFrom-JsonToJiraExpressionEvalRequestBeanContext {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => JiraExpressionEvalRequestBeanContext' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in JiraExpressionEvalRequestBeanContext
        $AllProperties = ("issue", "issues", "project", "sprint", "board", "serviceDesk", "customerRequest", "custom")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issue"))) { #optional property not found
            $Issue = $null
        } else {
            $Issue = $JsonParameters.PSobject.Properties["issue"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issues"))) { #optional property not found
            $Issues = $null
        } else {
            $Issues = $JsonParameters.PSobject.Properties["issues"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "project"))) { #optional property not found
            $Project = $null
        } else {
            $Project = $JsonParameters.PSobject.Properties["project"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sprint"))) { #optional property not found
            $Sprint = $null
        } else {
            $Sprint = $JsonParameters.PSobject.Properties["sprint"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "board"))) { #optional property not found
            $Board = $null
        } else {
            $Board = $JsonParameters.PSobject.Properties["board"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceDesk"))) { #optional property not found
            $ServiceDesk = $null
        } else {
            $ServiceDesk = $JsonParameters.PSobject.Properties["serviceDesk"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerRequest"))) { #optional property not found
            $CustomerRequest = $null
        } else {
            $CustomerRequest = $JsonParameters.PSobject.Properties["customerRequest"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom"))) { #optional property not found
            $Custom = $null
        } else {
            $Custom = $JsonParameters.PSobject.Properties["custom"].value
        }

        $PSO = [PSCustomObject]@{
            "issue" = ${Issue}
            "issues" = ${Issues}
            "project" = ${Project}
            "sprint" = ${Sprint}
            "board" = ${Board}
            "serviceDesk" = ${ServiceDesk}
            "customerRequest" = ${CustomerRequest}
            "custom" = ${Custom}
        }

        return $PSO
    }

}

