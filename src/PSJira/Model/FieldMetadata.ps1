#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The metadata describing an issue field.

.PARAMETER Required
Whether the field is required.
.PARAMETER Schema
No description available.
.PARAMETER Name
The name of the field.
.PARAMETER Key
The key of the field.
.PARAMETER AutoCompleteUrl
The URL that can be used to automatically complete the field.
.PARAMETER HasDefaultValue
Whether the field has a default value.
.PARAMETER Operations
The list of operations that can be performed on the field.
.PARAMETER AllowedValues
The list of values allowed in the field.
.PARAMETER DefaultValue
The default value of the field.
.PARAMETER Configuration
The configuration properties.
.OUTPUTS

FieldMetadata<PSCustomObject>
#>

function Initialize-FieldMetadata {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Required},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Schema},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AutoCompleteUrl},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasDefaultValue},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Operations},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AllowedValues},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DefaultValue},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Configuration}
    )

    Process {
        'Creating PSCustomObject: PSJira => FieldMetadata' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Required) {
            throw "invalid value for 'Required', 'Required' cannot be null."
        }

        if ($null -eq $Schema) {
            throw "invalid value for 'Schema', 'Schema' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Key) {
            throw "invalid value for 'Key', 'Key' cannot be null."
        }

        if ($null -eq $Operations) {
            throw "invalid value for 'Operations', 'Operations' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "required" = ${Required}
            "schema" = ${Schema}
            "name" = ${Name}
            "key" = ${Key}
            "autoCompleteUrl" = ${AutoCompleteUrl}
            "hasDefaultValue" = ${HasDefaultValue}
            "operations" = ${Operations}
            "allowedValues" = ${AllowedValues}
            "defaultValue" = ${DefaultValue}
            "configuration" = ${Configuration}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FieldMetadata<PSCustomObject>

.DESCRIPTION

Convert from JSON to FieldMetadata<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FieldMetadata<PSCustomObject>
#>
function ConvertFrom-JsonToFieldMetadata {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => FieldMetadata' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FieldMetadata
        $AllProperties = ("required", "schema", "name", "key", "autoCompleteUrl", "hasDefaultValue", "operations", "allowedValues", "defaultValue", "configuration")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'required' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "required"))) {
            throw "Error! JSON cannot be serialized due to the required property 'required' missing."
        } else {
            $Required = $JsonParameters.PSobject.Properties["required"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schema"))) {
            throw "Error! JSON cannot be serialized due to the required property 'schema' missing."
        } else {
            $Schema = $JsonParameters.PSobject.Properties["schema"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) {
            throw "Error! JSON cannot be serialized due to the required property 'key' missing."
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operations"))) {
            throw "Error! JSON cannot be serialized due to the required property 'operations' missing."
        } else {
            $Operations = $JsonParameters.PSobject.Properties["operations"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoCompleteUrl"))) { #optional property not found
            $AutoCompleteUrl = $null
        } else {
            $AutoCompleteUrl = $JsonParameters.PSobject.Properties["autoCompleteUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasDefaultValue"))) { #optional property not found
            $HasDefaultValue = $null
        } else {
            $HasDefaultValue = $JsonParameters.PSobject.Properties["hasDefaultValue"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowedValues"))) { #optional property not found
            $AllowedValues = $null
        } else {
            $AllowedValues = $JsonParameters.PSobject.Properties["allowedValues"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultValue"))) { #optional property not found
            $DefaultValue = $null
        } else {
            $DefaultValue = $JsonParameters.PSobject.Properties["defaultValue"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "configuration"))) { #optional property not found
            $Configuration = $null
        } else {
            $Configuration = $JsonParameters.PSobject.Properties["configuration"].value
        }

        $PSO = [PSCustomObject]@{
            "required" = ${Required}
            "schema" = ${Schema}
            "name" = ${Name}
            "key" = ${Key}
            "autoCompleteUrl" = ${AutoCompleteUrl}
            "hasDefaultValue" = ${HasDefaultValue}
            "operations" = ${Operations}
            "allowedValues" = ${AllowedValues}
            "defaultValue" = ${DefaultValue}
            "configuration" = ${Configuration}
        }

        return $PSO
    }

}

