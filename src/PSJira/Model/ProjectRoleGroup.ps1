#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of the group associated with the role.

.PARAMETER DisplayName
The display name of the group.
.PARAMETER Name
The name of the group. As a group's name can change, use of `groupId` is recommended to identify the group.
.PARAMETER GroupId
The ID of the group.
.OUTPUTS

ProjectRoleGroup<PSCustomObject>
#>

function Initialize-ProjectRoleGroup {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupId}
    )

    Process {
        'Creating PSCustomObject: PSJira => ProjectRoleGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "displayName" = ${DisplayName}
            "name" = ${Name}
            "groupId" = ${GroupId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProjectRoleGroup<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProjectRoleGroup<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProjectRoleGroup<PSCustomObject>
#>
function ConvertFrom-JsonToProjectRoleGroup {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ProjectRoleGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProjectRoleGroup
        $AllProperties = ("displayName", "name", "groupId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupId"))) { #optional property not found
            $GroupId = $null
        } else {
            $GroupId = $JsonParameters.PSobject.Properties["groupId"].value
        }

        $PSO = [PSCustomObject]@{
            "displayName" = ${DisplayName}
            "name" = ${Name}
            "groupId" = ${GroupId}
        }

        return $PSO
    }

}

