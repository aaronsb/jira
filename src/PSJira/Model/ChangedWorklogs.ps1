#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

List of changed worklogs.

.PARAMETER Values
Changed worklog list.
.PARAMETER Since
The datetime of the first worklog item in the list.
.PARAMETER VarUntil
The datetime of the last worklog item in the list.
.PARAMETER Self
The URL of this changed worklogs list.
.PARAMETER NextPage
The URL of the next list of changed worklogs.
.PARAMETER LastPage
No description available.
.OUTPUTS

ChangedWorklogs<PSCustomObject>
#>

function Initialize-ChangedWorklogs {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Values},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Since},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VarUntil},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NextPage},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LastPage}
    )

    Process {
        'Creating PSCustomObject: PSJira => ChangedWorklogs' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "values" = ${Values}
            "since" = ${Since}
            "until" = ${VarUntil}
            "self" = ${Self}
            "nextPage" = ${NextPage}
            "lastPage" = ${LastPage}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ChangedWorklogs<PSCustomObject>

.DESCRIPTION

Convert from JSON to ChangedWorklogs<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ChangedWorklogs<PSCustomObject>
#>
function ConvertFrom-JsonToChangedWorklogs {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ChangedWorklogs' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ChangedWorklogs
        $AllProperties = ("values", "since", "until", "self", "nextPage", "lastPage")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "values"))) { #optional property not found
            $Values = $null
        } else {
            $Values = $JsonParameters.PSobject.Properties["values"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "since"))) { #optional property not found
            $Since = $null
        } else {
            $Since = $JsonParameters.PSobject.Properties["since"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "until"))) { #optional property not found
            $VarUntil = $null
        } else {
            $VarUntil = $JsonParameters.PSobject.Properties["until"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nextPage"))) { #optional property not found
            $NextPage = $null
        } else {
            $NextPage = $JsonParameters.PSobject.Properties["nextPage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastPage"))) { #optional property not found
            $LastPage = $null
        } else {
            $LastPage = $JsonParameters.PSobject.Properties["lastPage"].value
        }

        $PSO = [PSCustomObject]@{
            "values" = ${Values}
            "since" = ${Since}
            "until" = ${VarUntil}
            "self" = ${Self}
            "nextPage" = ${NextPage}
            "lastPage" = ${LastPage}
        }

        return $PSO
    }

}

