#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of the issue creation metadata for an issue type.

.PARAMETER Self
The URL of these issue type details.
.PARAMETER Id
The ID of the issue type.
.PARAMETER Description
The description of the issue type.
.PARAMETER IconUrl
The URL of the issue type's avatar.
.PARAMETER Name
The name of the issue type.
.PARAMETER Subtask
Whether this issue type is used to create subtasks.
.PARAMETER AvatarId
The ID of the issue type's avatar.
.PARAMETER EntityId
Unique ID for next-gen projects.
.PARAMETER HierarchyLevel
Hierarchy level of the issue type.
.PARAMETER Scope
No description available.
.PARAMETER Expand
Expand options that include additional issue type metadata details in the response.
.PARAMETER Fields
List of the fields available when creating an issue for the issue type.
.OUTPUTS

IssueTypeIssueCreateMetadata<PSCustomObject>
#>

function Initialize-IssueTypeIssueCreateMetadata {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IconUrl},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Subtask},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AvatarId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EntityId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HierarchyLevel},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Scope},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Expand},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Fields}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssueTypeIssueCreateMetadata' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "self" = ${Self}
            "id" = ${Id}
            "description" = ${Description}
            "iconUrl" = ${IconUrl}
            "name" = ${Name}
            "subtask" = ${Subtask}
            "avatarId" = ${AvatarId}
            "entityId" = ${EntityId}
            "hierarchyLevel" = ${HierarchyLevel}
            "scope" = ${Scope}
            "expand" = ${Expand}
            "fields" = ${Fields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssueTypeIssueCreateMetadata<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssueTypeIssueCreateMetadata<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssueTypeIssueCreateMetadata<PSCustomObject>
#>
function ConvertFrom-JsonToIssueTypeIssueCreateMetadata {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssueTypeIssueCreateMetadata' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssueTypeIssueCreateMetadata
        $AllProperties = ("self", "id", "description", "iconUrl", "name", "subtask", "avatarId", "entityId", "hierarchyLevel", "scope", "expand", "fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iconUrl"))) { #optional property not found
            $IconUrl = $null
        } else {
            $IconUrl = $JsonParameters.PSobject.Properties["iconUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subtask"))) { #optional property not found
            $Subtask = $null
        } else {
            $Subtask = $JsonParameters.PSobject.Properties["subtask"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avatarId"))) { #optional property not found
            $AvatarId = $null
        } else {
            $AvatarId = $JsonParameters.PSobject.Properties["avatarId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entityId"))) { #optional property not found
            $EntityId = $null
        } else {
            $EntityId = $JsonParameters.PSobject.Properties["entityId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hierarchyLevel"))) { #optional property not found
            $HierarchyLevel = $null
        } else {
            $HierarchyLevel = $JsonParameters.PSobject.Properties["hierarchyLevel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expand"))) { #optional property not found
            $Expand = $null
        } else {
            $Expand = $JsonParameters.PSobject.Properties["expand"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fields"))) { #optional property not found
            $Fields = $null
        } else {
            $Fields = $JsonParameters.PSobject.Properties["fields"].value
        }

        $PSO = [PSCustomObject]@{
            "self" = ${Self}
            "id" = ${Id}
            "description" = ${Description}
            "iconUrl" = ${IconUrl}
            "name" = ${Name}
            "subtask" = ${Subtask}
            "avatarId" = ${AvatarId}
            "entityId" = ${EntityId}
            "hierarchyLevel" = ${HierarchyLevel}
            "scope" = ${Scope}
            "expand" = ${Expand}
            "fields" = ${Fields}
        }

        return $PSO
    }

}

