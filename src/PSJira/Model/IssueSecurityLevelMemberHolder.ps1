#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.

.PARAMETER Type
The type of permission holder.
.PARAMETER Parameter
As a group's name can change, use of `value` is recommended. The identifier associated withthe `type` value that defines the holder of the permission.
.PARAMETER Value
The identifier associated with the `type` value that defines the holder of the permission.
.PARAMETER Expand
Expand options that include additional permission holder details in the response.
.OUTPUTS

IssueSecurityLevelMemberHolder<PSCustomObject>
#>

function Initialize-IssueSecurityLevelMemberHolder {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Parameter},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Expand}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssueSecurityLevelMemberHolder' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "parameter" = ${Parameter}
            "value" = ${Value}
            "expand" = ${Expand}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssueSecurityLevelMemberHolder<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssueSecurityLevelMemberHolder<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssueSecurityLevelMemberHolder<PSCustomObject>
#>
function ConvertFrom-JsonToIssueSecurityLevelMemberHolder {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssueSecurityLevelMemberHolder' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssueSecurityLevelMemberHolder
        $AllProperties = ("type", "parameter", "value", "expand")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parameter"))) { #optional property not found
            $Parameter = $null
        } else {
            $Parameter = $JsonParameters.PSobject.Properties["parameter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expand"))) { #optional property not found
            $Expand = $null
        } else {
            $Expand = $JsonParameters.PSobject.Properties["expand"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "parameter" = ${Parameter}
            "value" = ${Value}
            "expand" = ${Expand}
        }

        return $PSO
    }

}

