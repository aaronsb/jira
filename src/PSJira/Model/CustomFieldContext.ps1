#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The details of a custom field context.

.PARAMETER Id
The ID of the context.
.PARAMETER Name
The name of the context.
.PARAMETER Description
The description of the context.
.PARAMETER IsGlobalContext
Whether the context is global.
.PARAMETER IsAnyIssueType
Whether the context apply to all issue types.
.OUTPUTS

CustomFieldContext<PSCustomObject>
#>

function Initialize-CustomFieldContext {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${IsGlobalContext},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${IsAnyIssueType}
    )

    Process {
        'Creating PSCustomObject: PSJira => CustomFieldContext' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Description) {
            throw "invalid value for 'Description', 'Description' cannot be null."
        }

        if ($null -eq $IsGlobalContext) {
            throw "invalid value for 'IsGlobalContext', 'IsGlobalContext' cannot be null."
        }

        if ($null -eq $IsAnyIssueType) {
            throw "invalid value for 'IsAnyIssueType', 'IsAnyIssueType' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "isGlobalContext" = ${IsGlobalContext}
            "isAnyIssueType" = ${IsAnyIssueType}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CustomFieldContext<PSCustomObject>

.DESCRIPTION

Convert from JSON to CustomFieldContext<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CustomFieldContext<PSCustomObject>
#>
function ConvertFrom-JsonToCustomFieldContext {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => CustomFieldContext' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CustomFieldContext
        $AllProperties = ("id", "name", "description", "isGlobalContext", "isAnyIssueType")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) {
            throw "Error! JSON cannot be serialized due to the required property 'description' missing."
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isGlobalContext"))) {
            throw "Error! JSON cannot be serialized due to the required property 'isGlobalContext' missing."
        } else {
            $IsGlobalContext = $JsonParameters.PSobject.Properties["isGlobalContext"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isAnyIssueType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'isAnyIssueType' missing."
        } else {
            $IsAnyIssueType = $JsonParameters.PSobject.Properties["isAnyIssueType"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "isGlobalContext" = ${IsGlobalContext}
            "isAnyIssueType" = ${IsAnyIssueType}
        }

        return $PSO
    }

}

