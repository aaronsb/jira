#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The details of a UI modification's context, which define where to activate the UI modification.

.PARAMETER Id
The ID of the UI modification context.
.PARAMETER ProjectId
The project ID of the context.
.PARAMETER IssueTypeId
The issue type ID of the context.
.PARAMETER ViewType
The view type of the context. Only `GIC` (Global Issue Create) is supported.
.PARAMETER IsAvailable
Whether a context is available. For example, when a project is deleted the context becomes unavailable.
.OUTPUTS

UiModificationContextDetails<PSCustomObject>
#>

function Initialize-UiModificationContextDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProjectId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IssueTypeId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ViewType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsAvailable}
    )

    Process {
        'Creating PSCustomObject: PSJira => UiModificationContextDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ProjectId) {
            throw "invalid value for 'ProjectId', 'ProjectId' cannot be null."
        }

        if ($null -eq $IssueTypeId) {
            throw "invalid value for 'IssueTypeId', 'IssueTypeId' cannot be null."
        }

        if ($null -eq $ViewType) {
            throw "invalid value for 'ViewType', 'ViewType' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "projectId" = ${ProjectId}
            "issueTypeId" = ${IssueTypeId}
            "viewType" = ${ViewType}
            "isAvailable" = ${IsAvailable}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UiModificationContextDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to UiModificationContextDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UiModificationContextDetails<PSCustomObject>
#>
function ConvertFrom-JsonToUiModificationContextDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => UiModificationContextDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UiModificationContextDetails
        $AllProperties = ("id", "projectId", "issueTypeId", "viewType", "isAvailable")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'projectId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'projectId' missing."
        } else {
            $ProjectId = $JsonParameters.PSobject.Properties["projectId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypeId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issueTypeId' missing."
        } else {
            $IssueTypeId = $JsonParameters.PSobject.Properties["issueTypeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "viewType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'viewType' missing."
        } else {
            $ViewType = $JsonParameters.PSobject.Properties["viewType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isAvailable"))) { #optional property not found
            $IsAvailable = $null
        } else {
            $IsAvailable = $JsonParameters.PSobject.Properties["isAvailable"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "projectId" = ${ProjectId}
            "issueTypeId" = ${IssueTypeId}
            "viewType" = ${ViewType}
            "isAvailable" = ${IsAvailable}
        }

        return $PSO
    }

}

