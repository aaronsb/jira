#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A workflow transition rule.

.PARAMETER Id
The ID of the transition rule.
.PARAMETER Key
The key of the rule, as defined in the Connect app descriptor.
.PARAMETER Configuration
No description available.
.PARAMETER Transition
No description available.
.OUTPUTS

ConnectWorkflowTransitionRule<PSCustomObject>
#>

function Initialize-ConnectWorkflowTransitionRule {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Configuration},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Transition}
    )

    Process {
        'Creating PSCustomObject: PSJira => ConnectWorkflowTransitionRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Key) {
            throw "invalid value for 'Key', 'Key' cannot be null."
        }

        if ($null -eq $Configuration) {
            throw "invalid value for 'Configuration', 'Configuration' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "key" = ${Key}
            "configuration" = ${Configuration}
            "transition" = ${Transition}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ConnectWorkflowTransitionRule<PSCustomObject>

.DESCRIPTION

Convert from JSON to ConnectWorkflowTransitionRule<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ConnectWorkflowTransitionRule<PSCustomObject>
#>
function ConvertFrom-JsonToConnectWorkflowTransitionRule {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ConnectWorkflowTransitionRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ConnectWorkflowTransitionRule
        $AllProperties = ("id", "key", "configuration", "transition")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) {
            throw "Error! JSON cannot be serialized due to the required property 'key' missing."
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "configuration"))) {
            throw "Error! JSON cannot be serialized due to the required property 'configuration' missing."
        } else {
            $Configuration = $JsonParameters.PSobject.Properties["configuration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transition"))) { #optional property not found
            $Transition = $null
        } else {
            $Transition = $JsonParameters.PSobject.Properties["transition"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "key" = ${Key}
            "configuration" = ${Configuration}
            "transition" = ${Transition}
        }

        return $PSO
    }

}

