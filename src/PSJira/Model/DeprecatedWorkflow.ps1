#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about a workflow.

.PARAMETER Name
The name of the workflow.
.PARAMETER Description
The description of the workflow.
.PARAMETER LastModifiedDate
The datetime the workflow was last modified.
.PARAMETER LastModifiedUser
This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
.PARAMETER LastModifiedUserAccountId
The account ID of the user that last modified the workflow.
.PARAMETER Steps
The number of steps included in the workflow.
.PARAMETER Scope
No description available.
.PARAMETER Default
No description available.
.OUTPUTS

DeprecatedWorkflow<PSCustomObject>
#>

function Initialize-DeprecatedWorkflow {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastModifiedDate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastModifiedUser},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastModifiedUserAccountId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Steps},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Scope},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Default}
    )

    Process {
        'Creating PSCustomObject: PSJira => DeprecatedWorkflow' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "lastModifiedDate" = ${LastModifiedDate}
            "lastModifiedUser" = ${LastModifiedUser}
            "lastModifiedUserAccountId" = ${LastModifiedUserAccountId}
            "steps" = ${Steps}
            "scope" = ${Scope}
            "default" = ${Default}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DeprecatedWorkflow<PSCustomObject>

.DESCRIPTION

Convert from JSON to DeprecatedWorkflow<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DeprecatedWorkflow<PSCustomObject>
#>
function ConvertFrom-JsonToDeprecatedWorkflow {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => DeprecatedWorkflow' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DeprecatedWorkflow
        $AllProperties = ("name", "description", "lastModifiedDate", "lastModifiedUser", "lastModifiedUserAccountId", "steps", "scope", "default")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastModifiedDate"))) { #optional property not found
            $LastModifiedDate = $null
        } else {
            $LastModifiedDate = $JsonParameters.PSobject.Properties["lastModifiedDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastModifiedUser"))) { #optional property not found
            $LastModifiedUser = $null
        } else {
            $LastModifiedUser = $JsonParameters.PSobject.Properties["lastModifiedUser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastModifiedUserAccountId"))) { #optional property not found
            $LastModifiedUserAccountId = $null
        } else {
            $LastModifiedUserAccountId = $JsonParameters.PSobject.Properties["lastModifiedUserAccountId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "steps"))) { #optional property not found
            $Steps = $null
        } else {
            $Steps = $JsonParameters.PSobject.Properties["steps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default"))) { #optional property not found
            $Default = $null
        } else {
            $Default = $JsonParameters.PSobject.Properties["default"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "lastModifiedDate" = ${LastModifiedDate}
            "lastModifiedUser" = ${LastModifiedUser}
            "lastModifiedUserAccountId" = ${LastModifiedUserAccountId}
            "steps" = ${Steps}
            "scope" = ${Scope}
            "default" = ${Default}
        }

        return $PSO
    }

}

