#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

An operand that is a function. See [Advanced searching - functions reference](https://confluence.atlassian.com/x/dwiiLQ) for more information about JQL functions.

.PARAMETER VarFunction
The name of the function.
.PARAMETER Arguments
The list of function arguments.
.OUTPUTS

FunctionOperand<PSCustomObject>
#>

function Initialize-FunctionOperand {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarFunction},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Arguments}
    )

    Process {
        'Creating PSCustomObject: PSJira => FunctionOperand' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $VarFunction) {
            throw "invalid value for 'VarFunction', 'VarFunction' cannot be null."
        }

        if ($null -eq $Arguments) {
            throw "invalid value for 'Arguments', 'Arguments' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "function" = ${VarFunction}
            "arguments" = ${Arguments}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FunctionOperand<PSCustomObject>

.DESCRIPTION

Convert from JSON to FunctionOperand<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FunctionOperand<PSCustomObject>
#>
function ConvertFrom-JsonToFunctionOperand {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => FunctionOperand' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FunctionOperand
        $AllProperties = ("function", "arguments")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'function' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "function"))) {
            throw "Error! JSON cannot be serialized due to the required property 'function' missing."
        } else {
            $VarFunction = $JsonParameters.PSobject.Properties["function"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "arguments"))) {
            throw "Error! JSON cannot be serialized due to the required property 'arguments' missing."
        } else {
            $Arguments = $JsonParameters.PSobject.Properties["arguments"].value
        }

        $PSO = [PSCustomObject]@{
            "function" = ${VarFunction}
            "arguments" = ${Arguments}
        }

        return $PSO
    }

}

