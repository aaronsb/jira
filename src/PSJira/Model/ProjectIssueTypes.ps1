#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Projects and issue types where the status is used. Only available if the `usages` expand is requested.

.PARAMETER Project
No description available.
.PARAMETER IssueTypes
IDs of the issue types
.OUTPUTS

ProjectIssueTypes<PSCustomObject>
#>

function Initialize-ProjectIssueTypes {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Project},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${IssueTypes}
    )

    Process {
        'Creating PSCustomObject: PSJira => ProjectIssueTypes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "project" = ${Project}
            "issueTypes" = ${IssueTypes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProjectIssueTypes<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProjectIssueTypes<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProjectIssueTypes<PSCustomObject>
#>
function ConvertFrom-JsonToProjectIssueTypes {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ProjectIssueTypes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProjectIssueTypes
        $AllProperties = ("project", "issueTypes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "project"))) { #optional property not found
            $Project = $null
        } else {
            $Project = $JsonParameters.PSobject.Properties["project"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypes"))) { #optional property not found
            $IssueTypes = $null
        } else {
            $IssueTypes = $JsonParameters.PSobject.Properties["issueTypes"].value
        }

        $PSO = [PSCustomObject]@{
            "project" = ${Project}
            "issueTypes" = ${IssueTypes}
        }

        return $PSO
    }

}

