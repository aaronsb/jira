#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A page of comments.

.PARAMETER StartAt
The index of the first item returned.
.PARAMETER MaxResults
The maximum number of items that could be returned.
.PARAMETER Total
The number of items returned.
.PARAMETER Comments
The list of comments.
.OUTPUTS

PageOfComments<PSCustomObject>
#>

function Initialize-PageOfComments {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${StartAt},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxResults},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Total},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Comments}
    )

    Process {
        'Creating PSCustomObject: PSJira => PageOfComments' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "startAt" = ${StartAt}
            "maxResults" = ${MaxResults}
            "total" = ${Total}
            "comments" = ${Comments}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PageOfComments<PSCustomObject>

.DESCRIPTION

Convert from JSON to PageOfComments<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PageOfComments<PSCustomObject>
#>
function ConvertFrom-JsonToPageOfComments {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => PageOfComments' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $PageOfCommentsAdditionalProperties = @{}

        # check if Json contains properties not defined in PageOfComments
        $AllProperties = ("startAt", "maxResults", "total", "comments")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $PageOfCommentsAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startAt"))) { #optional property not found
            $StartAt = $null
        } else {
            $StartAt = $JsonParameters.PSobject.Properties["startAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxResults"))) { #optional property not found
            $MaxResults = $null
        } else {
            $MaxResults = $JsonParameters.PSobject.Properties["maxResults"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total"))) { #optional property not found
            $Total = $null
        } else {
            $Total = $JsonParameters.PSobject.Properties["total"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        $PSO = [PSCustomObject]@{
            "startAt" = ${StartAt}
            "maxResults" = ${MaxResults}
            "total" = ${Total}
            "comments" = ${Comments}
            "AdditionalProperties" = $PageOfCommentsAdditionalProperties
        }

        return $PSO
    }

}

