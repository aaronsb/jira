#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of an issue type scheme.

.PARAMETER Id
The ID of the issue type scheme.
.PARAMETER Name
The name of the issue type scheme.
.PARAMETER Description
The description of the issue type scheme.
.PARAMETER DefaultIssueTypeId
The ID of the default issue type of the issue type scheme.
.PARAMETER IsDefault
Whether the issue type scheme is the default.
.OUTPUTS

IssueTypeSchemeProjectsIssueTypeScheme<PSCustomObject>
#>

function Initialize-IssueTypeSchemeProjectsIssueTypeScheme {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultIssueTypeId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsDefault}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssueTypeSchemeProjectsIssueTypeScheme' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "defaultIssueTypeId" = ${DefaultIssueTypeId}
            "isDefault" = ${IsDefault}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssueTypeSchemeProjectsIssueTypeScheme<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssueTypeSchemeProjectsIssueTypeScheme<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssueTypeSchemeProjectsIssueTypeScheme<PSCustomObject>
#>
function ConvertFrom-JsonToIssueTypeSchemeProjectsIssueTypeScheme {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssueTypeSchemeProjectsIssueTypeScheme' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssueTypeSchemeProjectsIssueTypeScheme
        $AllProperties = ("id", "name", "description", "defaultIssueTypeId", "isDefault")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultIssueTypeId"))) { #optional property not found
            $DefaultIssueTypeId = $null
        } else {
            $DefaultIssueTypeId = $JsonParameters.PSobject.Properties["defaultIssueTypeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isDefault"))) { #optional property not found
            $IsDefault = $null
        } else {
            $IsDefault = $JsonParameters.PSobject.Properties["isDefault"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "defaultIssueTypeId" = ${DefaultIssueTypeId}
            "isDefault" = ${IsDefault}
        }

        return $PSO
    }

}

